<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>APOLLO_META</name>
          <description>Apollo MetaServer </description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>http://conf-meta-test.xiniunet.com:8009</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ENV</name>
          <description>发布的环境</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>test</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>REPOSITORY</name>
          <description>镜像仓库</description>
          <defaultValue>192.168.20.200:50000</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>TYPE</name>
          <description></description>
          <defaultValue>jdk</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>MODULE</name>
          <description>需要发布的模块,为空发布当前项目</description>
          <defaultValue>master-business</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>GIT_URL</name>
          <description>Git地址</description>
          <defaultValue>http://gitlab.xiniunet.com/rd/master.git</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.14">
          <name>GIT_CREADENTIAL</name>
          <description>Git 凭据</description>
          <defaultValue>1be5a580-ed7f-42bf-b3fb-c1d70c648a4d</defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition plugin="git-parameter@0.9.13">
          <name>BRANCH_OR_TAG</name>
          <description>分支</description>
          <uuid>1a5d92d2-b0c0-484d-b1ce-dadee781bfc5</uuid>
          <type>PT_BRANCH</type>
          <branch></branch>
          <tagFilter>*</tagFilter>
          <branchFilter>.*</branchFilter>
          <sortMode>NONE</sortMode>
          <defaultValue>origin/master</defaultValue>
          <selectedValue>NONE</selectedValue>
          <useRepository>http://gitlab.xiniunet.com/rd/master.git</useRepository>
          <quickFilterEnabled>true</quickFilterEnabled>
          <listSize>5</listSize>
        </net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>NAMESPACE</name>
          <description>发布项目到那个空间</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>xiniunet</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>REPLICA_COUNT</name>
          <description>发布的实例个数</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>2</string>
              <string>3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>MAX_CPU</name>
          <description>每个实例需要多少核cpu 1000=1核</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1000m</string>
              <string>2000m</string>
              <string>3000m</string>
              <string>4000m</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>MAX_MEMORY</name>
          <description>每个实例需要的最大内存</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2048</string>
              <string>4096</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>HOST</name>
          <description>访问服务域名</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>INGRESS_ENABLED</name>
          <description>是否通过网关暴露服务</description>
          <defaultValue>false</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENABLED_20880</name>
          <description>是否监听20880端口</description>
          <defaultValue>true</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENABLED_80</name>
          <description>是否监听80端口</description>
          <defaultValue>false</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.87">
    <script>def createImageSuffix() {
    // 定义一个版本号作为当次构建的版本，输出结果 201912_69
    return new Date().format(&apos;yyyyMMdd&apos;) + &quot;-${env.BUILD_ID}&quot;
}
def getProbePort() {
    // 根据类型确认容器暴露端口
    if(Boolean.parseBoolean(params.ENABLED_80)){
        return 80
    } else if (Boolean.parseBoolean(params.ENABLED_20880)){
        return 20880
    }else{
        return 80
    }
}

def getJavaOptions() {
    // jvm设置
    int memory = params.MAX_MEMORY;
    int jvmMemory = (memory/3)*2;
    String javaOptions =&apos;&quot; -server -Xms&apos; + jvmMemory  + &apos;m -Xmx&apos; + jvmMemory + &apos;m -XX:+UseG1GC &quot;&apos;
    return javaOptions
}

node {
    
    stage (&quot;prepare git stage&quot;) {
        echo &apos;==== prepare stage start ====&apos;
        if(params.MODULE){
            env.app=params.MODULE
        }else{
            env.app=&apos;.&apos;
        }
        env.check_to = params.BRANCH_OR_TAG
        echo &apos;==== prepare stage end ====&apos;
    }
    stage (&quot;git stage&quot;) {
        echo &apos;==== git pull start ====&apos;
        echo env.image_version
        echo &apos;||&apos;
        git credentialsId: params.GIT_CREADENTIAL, url: params.GIT_URL
        sh &apos;[ -n &quot;${check_to}&quot; ] &amp;&amp;  git checkout ${check_to} ||  { echo -e &quot;切换至指定BRANCH或者TAG的版本，check：${check_to} 不存在或为空，请检查输入的BRANCH和TAG!&quot; &amp;&amp; exit 111; }&apos;
        echo &apos;||&apos;
        echo &apos;==== git pull end   ====&apos;
        }
        stage (&quot;mvn build stage&quot;) {
        echo &apos;==== mvn package begin ====&apos;
        echo &apos;||&apos;
        sh &apos;cd ${app} &amp;&amp; mvn clean package -Dmaven.test.skip=true -U -T 1C&apos;
        
        echo &apos;||&apos;
        echo &apos;==== mvn package  end   ====&apos;
    }
    stage (&quot;prepare install stage&quot;) {

        echo &apos;==== prepare install stage start ====&apos;
        //定义全局环境变量   
        env.max_cpu=params.MAX_CPU
        env.max_memory=params.MAX_MEMORY + &apos;Mi&apos;
        env.replica_count=params.REPLICA_COUNT
        env.publish_to=params.ENV
        env.project_type=params.TYPE
        pom = readMavenPom file: &quot;${app}/pom.xml&quot;
        if(pom.name){
            env.pkg_name=pom.name
        }else{
            env.pkg_name=pom.artifactId
        }
        env.image_repository=params.REPOSITORY
        env.project_repository=params.REPOSITORY + &apos;/business/&apos; + env.pkg_name.toLowerCase()
        env.release_name=env.pkg_name.toLowerCase()
        env.apollo_meta=params.APOLLO_META
        env.version=pom.version
        env.release_namespace=params.NAMESPACE
        env.java_options=getJavaOptions()
        env.image_suffix = createImageSuffix()
        env.image_tag = env.version + &apos;-&apos; + env.image_suffix
        env.pkg=env.pkg_name + &apos;-&apos; + env.version + &apos;.&apos; + pom.packaging
        env.host = params.HOST
        env.ingress_enabled = params.INGRESS_ENABLED
        env.enabled_80 = params.ENABLED_80
        env.enabled_20880 = params.ENABLED_20880
        env.probe_port = getProbePort()
        echo &apos;==== prepare install stage end ====&apos;
    }
    stage (&quot;docker build and push stage&quot;) {
        echo &apos;==== docker build and push begin ====&apos;
        switch(params.TYPE) { 
            case &quot;jetty&quot;: 
                sh &apos;mv -f ${app}/target/${pkg} /root/data/jenkins/docker/${project_type}/root.war&apos;
                sh &apos;cd /root/data/jenkins/docker/${project_type} &amp;&amp; docker build -t ${project_repository}:${image_tag} --build-arg IMAGE_REPOSITORY=${image_repository} .&apos;
                break;
            case &quot;jdk&quot;: 
                sh &apos;mv -f ${app}/target/${pkg} /root/data/jenkins/docker/${project_type}/app.jar&apos;
                sh &apos;cd /root/data/jenkins/docker/${project_type} &amp;&amp; docker build -t ${project_repository}:${image_tag} --build-arg IMAGE_REPOSITORY=${image_repository} .&apos;
                break;
            default:
                println(&quot;The type is unknown&quot;); 
                break; 
        }         
        sh &apos;docker push ${project_repository}:${image_tag}&apos;
        echo &apos;==== docker build and push end   ====&apos;
        echo &apos;==== rm -f root.war  start  ====&apos;
        sh &apos;rm -rf /root/data/jenkins/docker/${project_type}/root.war&apos;
        echo &apos;==== rm -f root.war  end   ====&apos;
    }
    stage (&quot;k8s helm stage&quot;) {
        //更新helm repo
        //sh &apos;helm repo update&apos;
        def install_status = sh (
            script: &quot;&quot;&quot;
                helm install ${release_name} xiniu-charts/app \
                --kubeconfig /root/data/jenkins/k8s/${publish_to}/config \
                --namespace ${release_namespace} \
                --set namespace=${release_namespace} \
                --set type=${project_type} \
                --set replicaCount=${replica_count} \
                --set image.repository=${project_repository} \
                --set image.tag=${image_tag} \
                --set resources.limits.cpu=${max_cpu} \
                --set resources.limits.memory=${max_memory} \
                --set resources.requests.memory=${max_memory} \
                --set env[0].name=JAVA_OPTIONS \
                --set env[0].value=${java_options} \
                --set env[1].name=APOLLO_META \
                --set env[1].value=${apollo_meta} \
                --set ingress.enabled=${ingress_enabled} \
                --set ingress.hosts[0].paths[0].path=&apos;/&apos; \
                --set ingress.hosts[0].host=${host} \
                --set ports.enabled80=${enabled_80} \
                --set ports.enabled20880=${enabled_20880} \
                --set probe.port=${probe_port}
            &quot;&quot;&quot;,
            returnStatus:true
            )
        // 已经安装 helm upgrade
        if (install_status != 0) {
            sh (
                script: &quot;&quot;&quot;
                    helm upgrade ${release_name} xiniu-charts/app \
                    --kubeconfig /root/data/jenkins/k8s/${publish_to}/config \
                    --namespace ${release_namespace} \
                    --set namespace=${release_namespace} \
                    --set type=${project_type} \
                    --set replicaCount=${replica_count} \
                    --set image.repository=${project_repository} \
                    --set image.tag=${image_tag} \
                    --set resources.limits.cpu=${max_cpu} \
                    --set resources.limits.memory=${max_memory} \
                    --set resources.requests.memory=${max_memory} \
                    --set env[0].name=JAVA_OPTIONS \
                    --set env[0].value=${java_options} \
                    --set env[1].name=APOLLO_META \
                    --set env[1].value=${apollo_meta} \
                    --set ingress.enabled=${ingress_enabled} \
                    --set ingress.hosts[0].paths[0].path=&apos;/&apos; \
                    --set ingress.hosts[0].host=${host} \
                    --set ports.enabled80=${enabled_80} \
                    --set ports.enabled20880=${enabled_20880} \
                    --set probe.port=${probe_port}
                &quot;&quot;&quot;
            )
        } 
        echo &apos;==== helm stage end ====&apos;
    }
    
    stage (&quot;monitor service status stage&quot;) {
    echo &apos;==== monitor service status stage start ====&apos;
    echo &quot;服务启动30s后开始获取服务状态\n&quot;
    echo &quot;每隔10s获取一次pod状态最多循环30次。监听5分钟内的服务状态（如果服务启动时间超过5分钟则从jenkins确认服务状态是不准确的）\n&quot;
    echo &quot;count循环次数\n&quot;
    echo &quot;count_total pod 个数\n&quot;
    echo &quot;count_running 就绪状态的pod个数\n&quot;
    echo &quot;count_crash 挂掉的pod个数\n&quot;
    echo &quot;count_crash==count_total 服务启动有问题\n&quot;
    echo &quot;count_running==count_total 服务启动正常\n&quot;
    echo &quot;5分钟后count_running&lt;&gt;count_total 服务启动有问题\n&quot;
	//30s后开始监听服务状态
	sh &apos;sleep 30s&apos;
	sh &apos;&apos;&apos;#!/bin/bash
	    echo &quot;获取当前项目pod状态命令:kubectl get pods --kubeconfig=&quot;/root/data/jenkins/k8s/${publish_to}/config&quot; -n ${release_namespace} | grep ${release_name}\n&quot;
        count=0
		count_total=0
		count_running=0
		count_crash=0
		while ( [ ${count} -lt 30 ] );do
		   sleep 10s
		   count_total=`kubectl get pods --kubeconfig=&quot;/root/data/jenkins/k8s/${publish_to}/config&quot; -n ${release_namespace} | grep ${release_name} | wc -l`
		   count_crash=`kubectl get pods --kubeconfig=&quot;/root/data/jenkins/k8s/${publish_to}/config&quot; -n ${release_namespace} | grep ${release_name} | grep CrashLoopBackOff | wc -l`
		   count_running=`kubectl get pods --kubeconfig=&quot;/root/data/jenkins/k8s/${publish_to}/config&quot; -n ${release_namespace} | grep ${release_name} | grep Running | grep &apos;1/1&apos; | wc -l`
		   
		   echo -e &quot;count=${count} \n count_total=${count_total} \n count_running=${count_running} \n count_crash=${count_crash} \n &quot;
		   
		   if ([ ${count_total} -eq ${count_crash} ] &amp;&amp; [ ${count_crash} -gt 0 ]);then
		       echo &quot;发布失败,请查看服务日志,排查失败原因!&quot;
		       break
		   fi
		   
		   

           if ([ ${count_total} -eq ${count_running} ] &amp;&amp; [ $count_total -gt 0 ]);then
		   	    echo &quot;发布成功!&quot;
		   	    break
		   fi
		   count=$[${count}+1]
		   sleep 10s
		done
		if [ ${count} -eq 30 ];then
		    echo &quot;发布失败,请查看服务日志,排查失败原因!&quot;
            exit
		fi
		&apos;&apos;&apos;
	    echo &apos;==== monitor service status stage end ====&apos;
	}
    
    //clear up our workspace
    cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
} </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>